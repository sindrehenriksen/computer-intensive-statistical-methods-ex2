<<echo=FALSE, cache=FALSE>>=
read_chunk("../code/Problem2.R")
@
\section{}
\label{sec:ex2}

From the formulations in exercise 1, a MCMC sampler can be implemented. The data used in this work is the '\textit{Oral}' dataset.  The libraries used in exercise 2 is
%
<<libs2, eval = FALSE, fig.align='center', fig.width=6, fig.height=4, fig.cap="fig caption">>==
@
%
Next we import the data and create a list \textit{input}, which is used in all of the functions in this exercise. It contains $\alpha$ and $\beta$ for the prior distribution for $\kappa_u$ and $\kappa_v$, the neighbourhood structure $R$, observed counts $y$ and expected counts $E$.
%
<<data2, eval = FALSE, fig.align='center', fig.width=6, fig.height=4, fig.cap="fig caption">>==
@
%
Then we are ready to start implementing samplers for the full conditionals.
First we look at the full conditional of $\kappa_u$, given by $p(\kappa_u\given\vect{y}, \kappa_v^{(m-1)},\vect{\eta}^{(m-1)}, \vect{u}^{(m-1)})$. The distribution can be found in Equation \eqref{eq:fc_kappa_u} and is implemented in the function \texttt{r\_kappa\_u}.
%
<<r_kappa_u, eval=FALSE>>=
@
%
%<<echo=FALSE>>=
%str(Oral)
%attach(Oral)
%@
%%
%The neighbourhood structure $\matr{R}$ is stored in the file 
%\textit{'tma4300\_ex2\_Rmatrix.Rdata'}.
%%
%<<echo=FALSE>>=
%load("./data/ex2_additionalFiles/tma4300_ex2_Rmatrix.Rdata")
%@
%%
%In the implementation we have created a list object, \textit{'input'}, that consists %of constants and the data from \textit{'Oral'}. It is used in function input in the %simulation. 
%%
%<<echo=FALSE>>=
%problem = list(
%  y = Oral$Y,
%  E = Oral$E,
%  n = length(Oral$Y),
%  R = R,
%  alpha_u = 1,
%  alpha_v = 1,
%  beta_u = 0.01,
%  beta_v = 0.01
%)
%@
%
%
%<<r_kappa_u, eval=FALSE>>=
%@
%%
%%
%<<r_kappa_v, eval=FALSE>>=
%@
%%
%%
%<<r_u, eval=FALSE>>=
%@
%%
%%
%<<r_eta_prop, eval=FALSE>>=
%@
%%
%%
%<<d_eta, eval=FALSE>>=
%@
%%
%%
%<<r_u, eval=FALSE>>=
%@
%%
%%
%<<acceptance_prob, eval=FALSE>>=
%@
%%
%$v
%$70000$ samples was generated and with the function \textit{system.time()} it used %$923.74$ second to generate. 
%%
%<<start_code, fig.align='center', fig.width=6, fig.height=4, fig.cap="">>==
%@